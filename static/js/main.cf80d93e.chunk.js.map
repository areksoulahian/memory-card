{"version":3,"sources":["Component/CharacterCard.js","Component/Wrapper.js","Component/Navbar.js","Component/Jumbotron.js","App.js","reportWebVitals.js","index.js"],"names":["CharacterCard","props","className","clicked","onClick","handleClick","id","alt","name","src","image","occupation","Wrapper","children","Navbar","currentScore","highScore","Jumbotron","App","state","characters","highSchore","Clicked","shuffleArray","handleScore","console","log","timesClicked","forEach","element","setState","handleIncrement","shuffledArr","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","this","map","character","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oNAwBeA,MAtBf,SAAuBC,GACnB,OACI,sBAAKC,UAAW,QAAUD,EAAME,QAAU,UAAY,IAClDC,QAAS,kBAAMH,EAAMI,YAAYJ,EAAMK,KAD3C,UAEQ,qBAAKJ,UAAY,gBAAjB,SACI,qBAAKK,IAAKN,EAAMO,KAAMC,IAAKR,EAAMS,UAErC,qBAAKR,UAAU,cAAf,SACI,+BACI,+BACI,4CAAwBD,EAAMO,QAElC,+BACI,kDAA8BP,EAAMU,uBCTjDC,MAJf,SAAiBX,GACb,OAAO,qBAAKC,UAAU,UAAf,SAA0BD,EAAMY,YCkB5BC,MAnBf,SAAgBb,GACd,OACE,wBAAQC,UAAU,4BAAlB,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,8CACA,sBAAKA,UAAU,WAAf,UACE,wCACS,+BAAOD,EAAMc,kBAEtB,4CACa,+BAAOd,EAAMe,eAEzBf,EAAMY,kBCAFI,MAVf,SAAmBhB,GACjB,OACE,qBAAKC,UAAU,4BAAf,SACE,sBAAKA,UAAU,YAAf,UAA4BD,EAAMY,SAChC,mBAAGX,UAAU,OAAb,6F,OCsFOgB,G,kNApFbC,MAAQ,CACNC,aACAC,WAAY,EACZN,aAAc,EACdO,SAAS,G,EAGXjB,YAAc,SAAAC,GACZ,EAAKiB,eACL,EAAKC,YAAYlB,GACjBmB,QAAQC,IAAI,EAAKP,MAAMQ,e,EAGzBH,YAAc,SAAAlB,GACZ,EAAKa,MAAMC,WAAWQ,SAAQ,SAAAC,GACxBvB,IAAOuB,EAAQvB,KAA0B,IAApBuB,EAAQ1B,UAC/B0B,EAAQ1B,SAAU,EAClB,EAAK2B,SAAS,CAAER,SAAS,IACzB,EAAKS,uB,EAMXR,aAAe,WAEb,IAAMS,EAAc,EAAKC,QAAQ,EAAKd,MAAMC,YAE5C,EAAKU,SAAS,CAAEE,iB,EAIlBD,gBAAkB,WAEhB,EAAKD,SAAS,CAAEf,aAAc,EAAKI,MAAMJ,aAAe,K,EAI1DkB,QAAU,SAAAC,GAMR,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,G,4CAOT,WAAU,IAAD,OACP,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEnB,aAAc2B,KAAKvB,MAAMJ,aACzBC,UAAW0B,KAAKvB,MAAMH,YAExB,cAAC,EAAD,IACC0B,KAAKvB,MAAMC,WAAWuB,KAAI,SAAAC,GAAS,OAClC,cAAC,EAAD,CACEtB,QAAS,EAAKH,MAAMG,QACpBjB,YAAa,EAAKA,YAClBC,GAAIsC,EAAUtC,GAEdE,KAAMoC,EAAUpC,KAChBE,MAAOkC,EAAUlC,MACjBC,WAAYiC,EAAUjC,YAHjBiC,EAAUtC,c,GA3ETuC,cCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.cf80d93e.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CharacterCard(props) {\n    return (\n        <div className={\"card\" + (props.clicked ? \"animate\" : \"\")} \n            onClick={() => props.handleClick(props.id)} >\n                <div className = \"img-container\">\n                    <img alt={props.name} src={props.image} />\n                </div>\n                <div className=\"img-content\">\n                    <ul>\n                        <li>\n                            <strong>Name: </strong>{props.name}\n                        </li>\n                        <li>\n                            <strong>Occupation: </strong>{props.occupation}\n                        </li>\n                    </ul>\n                </div>\n        </div>\n\n    )\n}\n\nexport default CharacterCard;\n\n","import React from \"react\";\n\nfunction Wrapper(props){\n    return <div className=\"wrapper\">{props.children}</div>\n}\n\nexport default Wrapper;\n\n\n","import React from \"react\";\n\nfunction Navbar(props) {\n  return (\n    <header className=\"container-fluid fixed-top\">\n      <div className=\"row\">\n        <h1 className=\"col-sm-8\">People Canceled Memory Card Game</h1>\n        <nav className=\"col-sm-4\">\n          <p>\n            Score: <span>{props.currentScore}</span>\n          </p>\n          <p>\n            Top Score: <span>{props.highScore}</span>\n          </p>\n          {props.children}\n        </nav>\n      </div>\n    </header>\n  );\n}\n\nexport default Navbar;\n","\n\nimport React from \"react\";\n\nfunction Jumbotron(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n      <div className=\"container\">{props.children}\n        <p className=\"lead\">Get points by clicking on an image but don't click on any more than once!</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Jumbotron;\n\n","import React, { Component } from \"react\";\nimport CharacterCard from \"./Component/CharacterCard\";\nimport Wrapper from \"./Component/Wrapper\";\nimport Navbar from \"./Component/Navbar\";\nimport Jumbotron from \"./Component/Jumbotron\";\nimport characters from \"./Component/characters.json\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  state = {\n    characters, \n    highSchore: 0,\n    currentScore: 0,\n    Clicked: false\n  };\n\n  handleClick = id => {\n    this.shuffleArray();\n    this.handleScore(id);\n    console.log(this.state.timesClicked);\n  };\n\n  handleScore = id => {\n    this.state.characters.forEach(element => {\n      if (id === element.id && element.clicked === false) {\n        element.clicked = true;\n        this.setState({ Clicked: false});\n        this.handleIncrement();\n      }\n    })\n  }\n\n\n  shuffleArray = () => {\n    // Shuffle array of objects\n    const shuffledArr = this.shuffle(this.state.characters);\n    // Setting 'shuffledArr' as the new state\n    this.setState({ shuffledArr });\n  };\n\n  // handleIncrement increments this.state.currentScore by 1\n  handleIncrement = () => {\n    // Using setState method to update component's state\n    this.setState({ currentScore: this.state.currentScore + 1 });\n  };\n\n  // Function that takes an array as a parameter and shuffles it\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n\n\n\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n        />\n        <Jumbotron />\n        {this.state.characters.map(character => (\n          <CharacterCard\n            Clicked={this.state.Clicked}\n            handleClick={this.handleClick}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n            occupation={character.occupation}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}